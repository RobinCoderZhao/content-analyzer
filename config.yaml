# config.yaml - 配置文件模板
content_dir: "./content"      # 内容文件目录
output_dir: "./output"        # 分析结果输出目录

# AI服务配置
ai:
  provider: "openai"          # 可选: openai, claude, local
  api_key: ""                 # API密钥，建议通过环境变量 AI_API_KEY 设置
  base_url: ""                # 自定义API地址（可选）
  model: "gpt-3.5-turbo"      # 使用的模型

# 图片分析配置
image:
  max_size: 10485760          # 最大文件大小 10MB
  supported_ext:              # 支持的图片格式
    - ".jpg"
    - ".jpeg"
    - ".png"
    - ".gif"
    - ".bmp"
    - ".webp"
  enable_ocr: false           # 是否启用OCR文字识别

# 分析配置
analysis:
  min_word_count: 50          # 最小字数要求
  max_word_count: 1000        # 推荐最大字数
  score_weights:              # 评分权重
    content_quality: 0.25     # 内容质量权重
    engagement: 0.20          # 互动性权重
    visual: 0.15              # 视觉效果权重
    title: 0.15               # 标题质量权重
    readability: 0.15         # 可读性权重
    trend_relevance: 0.10     # 趋势相关性权重

---
# go.mod - Go模块定义
module github.com/content-analyzer

go 1.21

require (
    gopkg.in/yaml.v3 v3.0.1
)

---
# Makefile - 构建脚本
.PHONY: build run test clean install

# 构建项目
build:
	go build -o bin/content-analyzer cmd/main.go

# 运行项目
run:
	go run cmd/main.go

# 运行测试
test:
	go test ./...

# 清理构建文件
clean:
	rm -rf bin/
	rm -rf output/

# 安装依赖
install:
	go mod tidy
	go mod download

# 初始化项目结构
init:
	mkdir -p content output internal/{analyzer,config,models,report,services}
	mkdir -p cmd

# 示例：分析指定目录
analyze:
	./bin/content-analyzer -config=config.yaml -dir=./content

---
# .env.example - 环境变量示例
# 复制为 .env 文件并填入真实值

# AI API配置
AI_API_KEY=your_api_key_here
AI_BASE_URL=https://api.openai.com/v1

# 其他配置
CONTENT_DIR=./content
OUTPUT_DIR=./output

---
# README.md - 项目说明
# 内容分析框架

基于Go语言开发的智能内容分析工具，帮助分析和提升小红书等平台的内容质量。

## 功能特点

- 📝 **文本分析**: 词数统计、可读性分析、情感分析、关键词提取
- 🎯 **标题分析**: 吸引力评分、点击率预测、优化建议
- 🖼️ **图片分析**: 视觉质量评估、构图分析、风格识别
- 📊 **综合评分**: 多维度评分体系，量化内容质量
- 💡 **改进建议**: 智能生成具体的优化建议
- 📈 **趋势分析**: 关键词热度、内容趋势识别
- 📋 **多格式报告**: JSON、HTML、CSV格式输出

## 快速开始

### 1. 安装依赖

```bash
go mod init content-analyzer
go mod tidy
```

### 2. 配置设置

复制配置模板：
```bash
cp config.yaml.example config.yaml
```

设置环境变量：
```bash
cp .env.example .env
# 编辑 .env 文件，填入API密钥
```

### 3. 准备内容文件

在 `content/` 目录下放置要分析的内容文件：

**JSON格式示例 (content/post1.json):**
```json
{
  "id": "post1",
  "title": "5个超实用的护肤小技巧，让你的皮肤水嫩如初！",
  "text": "大家好！今天想和大家分享一些我亲身试验过的护肤心得...",
  "images": [
    {
      "path": "images/skincare1.jpg",
      "caption": "护肤产品展示"
    }
  ],
  "tags": ["护肤", "美妆", "生活"],
  "published_at": "2024-01-15T10:00:00Z",
  "engagement": {
    "likes": 1250,
    "comments": 89,
    "shares": 45
  }
}
```

**Markdown格式示例 (content/post2.md):**
```markdown
# 冬日穿搭指南：温暖又时髦的搭配秘籍

最近天气越来越冷了，很多小仙女都在为穿搭发愁...

![冬日穿搭](images/winter_outfit.jpg)

## 搭配技巧

1. 层次感很重要
2. 色彩搭配要协调
3. 配饰画龙点睛

你们还有什么穿搭小技巧吗？快来评论区分享吧！

#穿搭 #冬日时尚 #搭配技巧
```

### 4. 运行分析

```bash
# 构建项目
make build

# 运行分析
./bin/content-analyzer

# 或直接运行
go run cmd/main.go
```

### 5. 查看结果

分析完成后，在 `output/` 目录下会生成：
- `analysis_report.json` - 详细的JSON数据
- `analysis_report.html` - 可视化HTML报告
- `analysis_report.csv` - 电子表格格式

## 项目结构

```
content-analyzer/
├── cmd/
│   └── main.go                 # 主程序入口
├── internal/
│   ├── analyzer/
│   │   └── analyzer.go         # 核心分析逻辑
│   ├── config/
│   │   └── config.go          # 配置管理
│   ├── models/
│   │   └── content.go         # 数据模型
│   ├── report/
│   │   └── reporter.go        # 报告生成
│   └── services/
│       ├── ai_service.go      # AI服务接口
│       └── image_service.go   # 图片分析服务
├── content/                   # 内容文件目录
├── output/                    # 分析结果输出
├── config.yaml               # 配置文件
├── go.mod                   # Go模块定义
└── README.md               # 项目说明
```

## 分析维度

### 文本分析
- **基础指标**: 字数、句子数、段落数
- **结构分析**: 是否有引言、结论、列表等
- **写作风格**: 语调、人称、正式程度
- **互动元素**: CTA、提问、话题标签

### 标题分析
- **长度适中**: 10-30字符最佳
- **吸引元素**: 数字、疑问句、情感词汇
- **清晰度**: 主题明确程度
- **点击率预测**: 基于历史数据的预测

### 图片分析
- **质量指标**: 分辨率、清晰度、噪点
- **构图分析**: 三分法则、对称性、平衡感
- **视觉元素**: 色彩、亮度、对比度
- **风格识别**: 现代、复古、简约等

### 综合评分
- **内容质量** (25%): 原创性、信息价值、结构完整性
- **互动潜力** (20%): 引导互动、情感共鸣、话题性
- **视觉吸引** (15%): 图片质量、视觉冲击力
- **标题质量** (15%): 吸引力、清晰度、优化程度
- **可读性** (15%): 语言难度、句子长度、逻辑性
- **趋势相关** (10%): 热门话题、关键词热度

## 扩展开发

### 添加新的分析维度

1. 在 `models/content.go` 中定义新的数据结构
2. 在 `analyzer/analyzer.go` 中实现分析逻辑
3. 更新 `report/reporter.go` 中的报告生成逻辑

### 集成外部API

1. 在 `services/` 目录下创建新的服务文件
2. 实现对应的接口方法
3. 在配置文件中添加相关配置项

### 自定义评分权重

修改 `config.yaml` 中的 `score_weights` 配置：

```yaml
analysis:
  score_weights:
    content_quality: 0.30    # 提高内容质量权重
    engagement: 0.25         # 提高互动性权重
    visual: 0.10            # 降低视觉权重
    # ... 其他权重
```

## 许可证

MIT License

## 贡献

欢迎提交Issue和Pull Request！
